'''
Encoder Inputs
- Vector Reprentation of the SMILE, generated by ChemBERTa
- Condition/Initial state vector
Encoder Output
- Latent Vector

Decoder Inputs
- Latent Vector
- Condition/Initial state vector

Decoder Output
- Image Vector Reprentation of the SMILE to be converted into image

'''

import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import DataLoader, Dataset

# Define the architecture of the VAE
class VAE(nn.Module):
    def __init__(self, input_size, hidden_size, latent_size, condition_size):
        super(VAE, self).__init__()
        
        # Encoder layers
        self.encoder = nn.Sequential(
            nn.Linear(input_size + condition_size, hidden_size),
            nn.ReLU(),
            nn.Linear(hidden_size, hidden_size),
            nn.ReLU(),
            nn.Linear(hidden_size, latent_size * 2)  # Two times latent_size for mean and log_var
        )
        
        # Decoder layers
        self.decoder = nn.Sequential(
            nn.Linear(latent_size + condition_size, hidden_size),
            nn.ReLU(),
            nn.Linear(hidden_size, hidden_size),
            nn.ReLU(),
            nn.Linear(hidden_size, input_size)
        )
        
    def encode(self, x):
        # Split concatenated input and condition
        input_data, condition = torch.split(x, [input_size, condition_size], dim=1)
        x = torch.cat([input_data, condition], dim=1)
        
        # Encode the input
        hidden = self.encoder(x)
        mean, log_var = torch.chunk(hidden, 2, dim=1)  # Split into mean and log_var
        return mean, log_var
    
    def reparameterize(self, mean, log_var):
        std = torch.exp(0.5 * log_var)
        eps = torch.randn_like(std)
        return mean + eps * std
    
    def decode(self, z, condition):
        # Concatenate latent representation and condition
        z = torch.cat([z, condition], dim=1)
        return self.decoder(z)
    
    def forward(self, x, condition):
        mean, log_var = self.encode(x)
        z = self.reparameterize(mean, log_var)
        return self.decode(z, condition), mean, log_var

# Custom dataset class
class CustomDataset(Dataset):
    def __init__(self, input_data, condition_data, target_data):
        self.input_data = input_data
        self.condition_data = condition_data
        self.target_data = target_data
    
    def __len__(self):
        return len(self.input_data)
    
    def __getitem__(self, index):
        return self.input_data[index], self.condition_data[index], self.target_data[index]

# Define hyperparameters
input_size = YOUR_INPUT_SIZE
hidden_size = YOUR_HIDDEN_SIZE
latent_size = YOUR_LATENT_SIZE
condition_size = YOUR_CONDITION_SIZE
learning_rate = 0.001
batch_size = 32
num_epochs = 50

# Create the VAE model
vae = VAE(input_size, hidden_size, latent_size, condition_size)
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
vae.to(device)

# Define loss function and optimizer
criterion = nn.MSELoss()
optimizer = optim.Adam(vae.parameters(), lr=learning_rate)

# Assuming you have your preprocessed data ready as input_data, condition_data, and target_data
dataset = CustomDataset(input_data, condition_data, target_data)
dataloader = DataLoader(dataset, batch_size=batch_size, shuffle=True)

# Training loop
for epoch in range(num_epochs):
    total_loss = 0
    for inputs, conditions, targets in dataloader:
        inputs, conditions, targets = inputs.to(device), conditions.to(device), targets.to(device)
        
        # Forward pass
        outputs, mean, log_var = vae(inputs, conditions)
        
        # Calculate the reconstruction loss (MSE loss)
        loss_recon = criterion(outputs, targets)
        
        # Calculate the KL divergence loss for regularization
        kl_divergence = -0.5 * torch.sum(1 + log_var - mean.pow(2) - log_var.exp())
        
        # Total loss is the sum of the reconstruction loss and KL divergence loss
        loss = loss_recon + kl_divergence
        
        # Backpropagation and optimization
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()
        
        total_loss += loss.item()
    
    # Print the average loss for this epoch
    print(f"Epoch {epoch+1}/{num_epochs}, Loss: {total_loss / len(dataloader)}")

# Training is done!
